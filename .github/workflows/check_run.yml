name: Check build

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        ports:
          - "5432:5432"
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: migratecheck
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      #- name: Check out code
      #  uses: actions/checkout@v2
      #  with:
      #    submodules: recursive

      - name: Install Docker
        run: |
          sudo apt-get update
          sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
          sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
          sudo apt-get update
          sudo apt-get install -y docker-ce
          sudo systemctl enable --now docker
          sudo usermod -aG docker $USER
          docker --version  # Проверка установки Docker


      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/$(curl -s https://api.github.com/repos/docker/compose/releases/latest | jq -r .tag_name)/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version  # Проверка установки Docker Compose

      - name: Build and start dockers
        run: |
          # Если файл находится в корневой директории, используйте этот путь:
          docker-compose -f docker-compose.yml up -d --build
          sleep 30  # Задержка для инициализации сервисов

      - name: Check Backend -> PostgreSQL Connection
        run: |
          docker exec -i backend_app \
          sh -c 'PGPASSWORD="$SPRING_DATASOURCE_PASSWORD" psql -h postgres -U $SPRING_DATASOURCE_USERNAME -d $SPRING_DATASOURCE_URL -c "\dt"' || exit 1
          echo "Backend connected to PostgreSQL successfully"

      - name: Auth check
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" -X POST http://backend_app:8080/authenticate \
          -H "Content-Type: application/json" \
          -d '{"username": "John_Smith", "password": "password1"}')
          if [ "$response" -ne 200 ]; then
            echo "Authentication failed with response code $response"
            exit 1
          else
            echo "Authentication successful"
          fi

      - name: Check frontend -> backend
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" -X GET http://frontend_app:3000/api/your-endpoint)
          if [ "$response" -ne 200 ]; then
            echo "Frontend failed to connect to backend with response code $response"
            exit 1
          else
            echo "Frontend connected successfully"
          fi

      - name: Finish
        run: |
          docker-compose -f docker-compose.yml down
